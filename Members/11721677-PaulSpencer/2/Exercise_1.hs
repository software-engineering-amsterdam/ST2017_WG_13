module Lab2 where
import Data.List
import Data.Char
import System.Random
import Control.Monad
import Test.QuickCheck
import Test.QuickCheck.Monadic
import Data.Bits.Floating
-- Your programmer Red Curry has written the following function for generating lists of floating point numbers.

-- > probs :: Int -> IO [Float]
-- > probs 0 = return []
-- > probs n = do
-- >              p <- getStdRandom random
-- >              ps <- probs (n-1) 
-- >              return (p:ps)
-- He claims that these numbers are random in the open interval (0..1). Your task is to test whether 
-- this claim is correct, by counting the numbers in the quartiles

-- (0..0.25),[0.25..0.5),[0.5..0.75),[0.75..1)(0..0.25),[0.25..0.5),[0.5..0.75),[0.75..1)

-- and checking whether the proportions between these are as expected.

-- E.g., if you generate 10000 numbers, then roughly 2500 of them should be in each quartile.

-- Implement this test, and report on the test results.

probs :: Int -> IO [Float]
probs 0 = return []
probs n = do
    p <- getStdRandom random
    ps <- probs (n-1) 
    return (p:ps)

closedIntervalProperty:: Positive Int -> Property
closedIntervalProperty (Positive n) = monadicIO $ do
    testprobs <- run (probs n)
    assert $ (not $ elem 0 testprobs) && (not $ elem 1 testprobs) 
    
runXTimes::Int -> Int -> IO [Float]
runXTimes _ 0 = return []
runXTimes n c = liftM2 (++) (probs n) (runXTimes n (c-1))

runLotsOfTimes::Int -> IO [Float]
runLotsOfTimes n =  (runXTimes n 1000) 

fillBuckets xs = foldl addToBucket (0,0,0,0) xs

addToBucket:: (Int,Int,Int,Int) -> Float -> (Int,Int,Int,Int)
addToBucket (a,b,c,d) n
    | n < 0.25  = (a+1,b,c,d)
    | n < 0.5   = (a,b+1,c,d)
    | n < 0.75  = (a,b,c+1,d)
    | otherwise = (a,b,c,d+1)

-- isRandom:: (Int,Int,Int,Int) -> Bool
-- isRandom (a,b,c,d) = (a=b) &&

-- Shannon entropy   H   of a given input string
-- inspiredby https://rosettacode.org/wiki/Entropy#Haskell
entropy :: (Ord a, Floating c) => [a] -> c  
entropy = sum . map lg . fq . map genericLength . group . sort 
    where 
        lg c = -c * logBase 2 c
        fq c = let sc = sum c in map (/ sc) c

-- inspired by Hutton chapter 5
chisqr :: [Float] -> [Float] -> Float 
chisqr os es = sum [((o-e)^2)/e | (o,e) <- zip os es]
        
-- Frequency Test: Monobit
-- inspired by monobit.py

-- for char in bin_data:
-- if char == '0':
--     count -= 1
-- else:
--     count += 1
-- # Calculate the p value
-- sobs = count / math.sqrt(len(bin_data))
-- p_val = spc.erfc(math.fabs(sobs) / math.sqrt(2))
-- return p_val


-- Frequency Test: Block
-- Runs Test
-- Test for the Longest Runs of Ones in a Block
-- Binary Matrix Rank Test
-- Discrete Fourier Transform (Spectral Test)
-- Non-Overlapping Template Matching Test
-- Overlapping Template Matching Test
-- Maurer's Universal Statistical Test
-- Linear Complexity Test
-- Serial Test
-- Approximate Entropy Test
-- Cumulative Sums Test
-- Random Excursions Test
-- Random Excursions Variant Test
--A chi-square test
-- A test of runs above and below the median
-- A reverse arrangements test
-- An overlapping sums test
-- A binary rank test for 32Ã—32 matrices


-- average::[Int] -> Float
-- average xs = (fromIntegral (sum xs)) / (fromIntegral (length xs))

-- equalsDelta :: Float -> Float -> Float -> Bool
-- equalsDelta n target delta 
--     | n > (target + delta) = False
--     | n < (target - delta) = False
--     | otherwise = True

-- -- statisticallySignificantProperty:: Positive Int -> Property
-- -- statisticallySignificantProperty (Positive n) = monadicIO $ do
-- --     mayberandom <- run (runLotsOfTimes n)
-- --     fillBuckets mayberandom
-- --     assert $ equalsDelta (average randomQuartiles) 1.5 0.1



-- -- probs' :: Int -> IO [Float]
-- -- probs' 0 = return []
-- -- probs' n = do
-- --     p <- getStdRandom $ randomR (0,0.25)
-- --     q <- getStdRandom $ randomR (0.25,0.5)
-- --     r <- getStdRandom $ randomR (0.5,0.75)
-- --     s <- getStdRandom $ randomR (0.75,1)
-- --     ps <- probs' (n-1)
-- --     return (p:q:r:s:ps)

test::[Float]
test = [0.2444045,0.46079576,0.2525757,0.12763864,0.8008957,0.4579125,0.488842,0.7331944,0.46978384,0.6960751,0.8390227,0.48473758,0.6233746,0.9957439,0.51933515,0.70498216,0.6531757,0.53174716,0.29768437,0.14178628,0.8621164,2.8300762e-2,0.5973981,9.200227e-2,0.61409235,0.66816443,0.18190175,0.21795899,8.976787e-2,0.7494054,0.16413724,0.5346131,0.32972163,9.25318e-2,0.8853348,0.98503083,0.5159162,0.46254116,0.39481694,0.5528006,0.9000259,0.4644583,0.321137,0.85500365,0.55556786,0.38926506,0.42594844,0.7172972,0.18678135,0.44382542,0.8758938,0.82424545,8.842456e-2,0.7996093,0.7545017,0.36992395,0.15181553,0.36531723,0.30974388,0.8304755,0.9925355,0.79649603,0.19402212,0.74402314,0.48406672,0.6667313,0.7954547,0.7790804,0.65808654,0.62694836,0.9184747,0.81135714,0.93627703,0.75170225,0.18850917,7.021129e-2,0.24216372,0.36918765,0.6649828,0.94007796,0.1283375,0.66874456,0.42285836,0.12913203,0.77200615,0.49774748,0.10302949,0.7711269,0.6490362,0.3829581,7.625675e-2,0.38642812,0.9894859,0.13930792,0.549297,4.9362242e-2,0.5568981,0.88299835,0.3402595,0.57896805,0.5207105,0.53180474,0.112207234,0.55531174,0.9370009,0.67794406,0.39675218,0.103746,0.9739315,8.629686e-2,0.79326224,0.48319292,0.11634731,0.1620102,0.33009547,0.6007273,0.40598214,0.16557795,0.2125032,0.92455864,0.29714787,0.7011989,0.92375565,0.27320683,0.6463832,0.5908901,0.49519455,0.57061726,0.10450959,0.2841648,0.86739355,0.86000204,0.45057327,0.84611905,0.98940945,0.12757075,0.7327422,1.02523565e-2,0.58839566,0.7510572,0.3620721,0.6298227,0.6159294,0.9194655,0.2959323,0.36793202,0.98619795,0.6626329,0.7586424,0.24306846,0.8408562,7.0696473e-3,2.2408843e-2,1.0892868e-2,9.081036e-2,0.16953176,6.2428176e-2,0.17150313,0.4056303,0.96001583,0.4315586,4.7928274e-2,0.65800494,0.54951465,0.13281906,0.7544063,0.670986,0.12978917,0.4859246,0.62859315,0.61876684,0.8848821,7.865715e-2,0.5577688,0.7447125,0.89332163,0.8795655,0.5758332,0.72349113,0.38372624,0.76998603,0.16683847,0.60286784,0.7305547,0.20042348,0.9491563,0.39335364,0.29014945,0.8282293,0.22647214,0.8418393,0.13384724,0.3834306,0.70616174,0.8394801,0.9482015,0.80421484,0.5995067,0.8426584,0.3607545,0.9357794,0.53842527,0.5394501,0.8521389,0.56748223,0.29629457,0.6654361,0.15316266,0.10875195,0.41147226,0.54784864,0.9435825,6.980109e-2,0.6777366,0.97391593,0.4467615,4.6487927e-2,0.7446721,0.22953635,0.48528826,0.3293982,0.40798664,0.93406177,0.23069829,0.60325134,0.24780029,0.4470778,0.22086471,0.8832702,1.3590515e-2,0.12635785,0.2740742,0.33724087,0.19779426,0.7863438,0.98076034,9.447551e-2,5.1944196e-2,0.6503159,0.4668882,0.17423332,5.2494824e-2,0.69943535,0.85917825,0.26152408,0.19694632,0.6057571,0.9017745,0.66914195,0.13951707,0.1437729,0.66387826,0.3894694,0.51240355,0.82894343,0.6876883,0.31363654,0.5577386,5.685079e-2,0.342511,0.87588555,0.61813164,0.2262364,5.0850093e-2,0.9661956,0.29588997,0.4563375,0.6162516,0.60999733,6.384009e-2,0.37133557,0.77038324,0.4809922,6.954652e-2,5.7092905e-2,0.9150488,0.9230242,3.9351523e-2,2.8550327e-2,0.40726727,0.44657087,0.62254834,0.7681214,0.8666383,0.28519022,0.79425085,7.8106284e-2,0.60461265,0.3578601,3.9651036e-2,0.54708034,0.24421656,0.6114091,0.6949191,0.6701578,0.14230394,0.49086744,4.0391266e-2,0.428429,0.8244937,0.3173042,0.6407605,0.5007812,0.7383129,0.45119923,0.29692775,0.25937563,0.93331087,0.86430985,0.9879826,0.34961414,0.2534402,0.54193395,0.55944186,0.21543694,0.8491676,0.58874536,0.489312,0.14270991,0.40570498,0.1251952,0.63224256,0.40795732,0.45564437,0.16228127,0.4832067,0.9535946,0.69419575,0.65339226,1.36966705e-2,0.90615237,0.9517469,0.42054105,1.6942382e-2,0.13436753,0.5013766,0.12898451,0.7895941,0.8925284,0.72804266,9.272301e-2,0.5702671,0.95500267,0.55299395,0.577044,0.6373128,0.34772044,0.32682455,0.83134097,0.4313032,0.18901259,0.89228463,0.5142004,5.4537237e-2,0.7460125,0.6807069,0.9444806,0.9024506,0.6540819,0.66799283,0.4497972,4.2761207e-2,0.51332664,0.34959602,0.8704774,0.30379063,0.56428736,0.1761573,0.19576997,0.896412,0.3127414,0.2670825,0.15928495,2.885425e-2,0.3728292,0.8629157,0.7135145,0.6346066,0.23750871,9.6262395e-2,0.14554018,0.104785144,0.5539846,0.8471898,0.6297862,0.30734783,0.97227377,0.12927979,0.15512174,5.1938057e-2,0.43631566,0.19766676,0.38620842,0.7710609,0.72380424,0.40865284,1.7629981e-2,8.7560296e-2,0.35229194,0.89655286,0.7748684,6.844783e-2,0.691719,0.7261028,0.16325277,0.9402725,0.40127587,0.51402605,0.5516563,1.6034782e-2,0.45265293,0.8173157,6.688148e-2,0.70455235,8.715856e-2,0.67059195,0.24369735,0.4051538,0.47988248,0.7725117,2.813077e-2,0.6594687,0.557479,0.60126877,0.9280351,0.4215644,0.50576705,0.16339058,0.68252695,0.1464243,0.2963211,0.6521365,9.605354e-2,0.28942943,0.24778974,0.17551106,1.3000727e-2,0.1868403,0.8653577,0.19371665,0.20987564,0.29192555,3.9135396e-2,6.2943935e-2,0.3548249,0.8326025,0.46076584,0.87603784,0.5923459,0.23311734,0.12207478,0.35123807,0.98603016,0.68554926,0.4495899,9.252071e-3,0.29105031,0.9558652,0.34334528,9.369773e-2,0.29609853,0.61595225,0.7202549,0.89847016,0.4901834,0.49648768,0.6242982,7.317358e-2,0.36962146,0.14239693,2.1109581e-2,0.7553999,0.41337562,0.5995164,0.12332541,0.3837402,0.14679223,0.4562148,0.34483957,0.8397946,0.6830848,0.1382224,4.6489835e-3,0.7055229,0.92401063,0.8550242,0.1999715,0.36008513,5.7510555e-2,0.4620822,0.24782383,0.9868366,0.44734776,0.8424217,0.9920747,0.46921623,0.6749682,9.892404e-2,0.33405334,0.55489254,0.6523379,0.14494199,0.43499404,0.85264444,0.29102957,0.9513773,0.6366821,0.9750942,0.10466039,0.945207,4.1382194e-2,0.61571383,0.21880823,0.7224131,0.9723139,0.5971452,0.1638655,0.5886552,0.9116526,0.23460317,0.29438245,0.6929443,0.8234555,0.40329057,0.24120516,0.57887465,0.9919957,0.12406272,0.7181819,0.32856292,0.989567,0.33914697,0.39472073,0.54491913,0.4740678,0.77071303,0.76836073,0.19634956,0.17787707,0.87785316,0.1899991,0.4311434,0.7902353,0.2190659,0.1220752,0.519203,0.39962518,4.2263508e-2,0.68511933,0.7330982,1.9352794e-2,0.43861133,0.44772947,0.92875654,0.982732,0.8458845,0.4907742,0.98422766,0.443821,0.9905916,0.90432495,0.2601059,0.3810835,0.59887046,9.679061e-2,0.634811,0.23897862,0.24956518,0.27592462,0.4520114,0.668538,0.8840112,0.9600696,0.9357831,2.1897376e-2,0.97215945,0.5557914,0.84939784,0.93920046,0.21312296,0.9558521,0.7494896,0.57645905,0.27207196,6.0126662e-2,0.8873976,0.5440883,0.77857137,0.2832623,0.8842362,0.72837454,0.8469102,0.44390482,0.24268234,0.608896,0.75883317,0.70403427,0.85495263,0.4339487,4.897201e-2,0.67652375,0.17201352,0.8591449,0.12370324,0.5355471,0.19735563,0.39598018,4.921317e-3,0.19751519,0.8245533,0.360031,0.43360645,0.8249671,0.46004313,7.104695e-3,0.88553286,0.6488442,0.44373423,0.90730065,9.162855e-2,0.20160037,0.8803497,0.12165046,0.3822673,0.8811306,5.7580054e-2,0.11535674,0.57937443,0.38797623,0.29428715,0.18938375,0.15006119,0.8135608,0.15143818,0.12112957,4.093522e-2,0.42773318,0.81809956,0.19551587,0.731382,0.6557581,0.35367668,0.8295933,0.52061397,0.53151345,0.19738507,0.10732198,0.13149142,0.3849619,0.90812427,0.6719498,0.70269,3.3492267e-2,0.74986094,0.6361176,0.67971826,0.9875581,0.9585295,0.4861048,0.7534345,0.7282991,0.34747005,3.7658513e-2,0.2213502,4.6297908e-2,0.7425561,0.66694677,0.6747903,0.45128018,0.15448636,0.9923039,0.11205518,0.83894897,0.97806257,0.13348407,0.19738859,0.29473943,0.17997622,0.97626966,0.38200545,4.4265628e-2,0.77793956,0.8144628,0.66761374,0.76330733,0.85351133,3.0640721e-2,0.78330827,0.9761733,0.28712738,0.46413136,0.87993056,0.90038824,0.9436536,0.9792212,0.4688387,0.12592596,0.19585204,0.9487257,0.10313487,0.89510494,1.6158104e-2,0.8828237,0.16608584,0.45285708,0.22737837,0.9508814,0.40194303,0.667427,0.11958784,0.92776686,0.16232324,0.7010205,0.8897121,0.7012999,0.8791387,0.5616386,0.9894576,0.9928012,0.15417618,0.23411733,0.72000855,0.27272516,0.80932033,0.513715,0.8700671,0.8748137,8.1980586e-2,0.65384054,0.15295559,0.7027947,0.6763164,2.057016e-3,0.20454675,0.116649985,0.28083682,0.19559205,0.7129434,0.98425025,0.75535935,0.915135,0.6955517,0.11636591,0.27476233,0.88580954,0.5069168,0.48551482,9.281665e-2,0.42314792,0.25488204,0.68218684,0.3840779,0.85114545,1.7035604e-2,0.8135853,0.13955808,6.762648e-2,0.30952436,6.106448e-2,0.60150397,0.56159383,0.21442193,0.9268361,8.068514e-2,9.759462e-2,0.6917149,0.9651558,0.9299387,0.71016103,0.34753108,0.48722482,0.741391,0.8547911,0.4630115,0.98739994,0.68203366,0.7674471,0.17300075,0.6128277,0.7897473,0.99577403,0.5597133,0.9759287,0.7951792,0.39809567,0.8724482,0.61961514,0.6121445,0.63388896,0.15768301,0.79568833,0.6381277,0.5977502,0.3666358,0.6517935,0.62937826,0.6122681,0.86422133,0.9188719,0.41195238,0.3470539,0.24741477,9.669316e-2,0.8191885,0.52779,0.3131734,0.22916847,0.7851891,0.1390562,7.088679e-2,0.7734912,4.575348e-2,2.06092e-2,0.743198,0.48027986,0.26931208,0.11287522,0.5025233,0.14044297,0.403987,0.99283946,0.80177695,0.7203596,0.94715345,0.99206007,0.15417922,0.78884804,0.28454268,0.6431219,0.97763276,0.6011724,0.49897087,0.7610842,0.75852543,0.49343878,0.61156636,0.82963264,0.47362792,0.5190543,0.85127497,0.5650526,0.5968815,0.94612944,0.5287625,0.17095262,0.43538946,0.52893525,0.54268205,0.8088413,0.49887395,0.2547596,0.6286741,0.8422734,0.890303,0.9801393,0.33948106,0.6197605,3.012985e-2,0.82234335,0.82214373,0.22797483,0.27202445,0.657193,0.34876114,0.48214364,0.3037086,0.19492215,0.18735313,0.57282627,0.83004826,0.2873522,0.9818251,0.317833,0.94636506,0.86460793,0.4372105,0.99180806,0.9473862,0.4755233,0.36073202,0.6573506,0.7769184,0.11280733,0.4114312,4.541087e-2,0.2963797,0.37106335,0.7830912,0.86388147,0.38546646,0.10738075,0.79742926,0.41717786,0.78504604,0.7325735,0.88882524,0.7991969,0.3622229,0.7376184,0.714856,0.8465178,0.7169166,0.62236583,0.5934202,0.3840924,0.9471297,0.9670529,0.20765865,0.91305,8.805978e-2,0.9748917,0.8833964,0.4042186,0.65119535,0.8699971,0.44198048,0.6387329,0.83579564,0.12673926,0.9501843,3.9808333e-2,0.54667926,0.22684425,0.32612336,0.97746265,0.12509584,0.13265705,0.39887607,0.52476,0.957422,0.84662527,5.3786933e-2,0.60581607,0.52278095,0.5748654,0.3782624,0.7300977,0.20268768,0.6513317,0.6557813,2.1424115e-2,0.89010763,2.5214136e-2,0.80922973,6.970787e-2,0.20132488,0.69745827,0.24000645,0.4547323,0.32799792,0.66424984,0.214302,0.98510617,0.41432816,0.5452642,0.86466527,2.908361e-2,0.9442079,5.1229477e-2,0.513696,0.92792016,0.8977207,0.10908812,0.33890045,6.927955e-2,0.59600616,0.18814754,8.934593e-2,0.4128402,0.71322566,0.3543421,0.21243948,0.20954233,9.579778e-2,0.50043297,0.186059,0.16908294,5.456984e-3,0.68312705,0.64313924,0.5984703,0.52863705,0.7278098,0.43681479,0.6414592,0.5583435,0.7371165,0.4281786,0.7897229,5.3611398e-2,0.8673037,0.6953065,0.5338103,0.3319934,0.37556016,0.9205846,0.66763467,9.355885e-2,0.7853218,0.18563402]